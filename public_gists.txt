

##################################################################################################
# description:  bash: redirect with tee stdout and stdin inside a script to a file
# raw_url:      https://gist.githubusercontent.com/mrkafk/bd84757814125f006e4cdfc46a1a08ae/raw/5abe08fed51a3d01c2401a731a836f1358e9554f/gistfile1.txt
# filename:     gistfile1.txt


exec &> >(tee -a /var/log/rclocal.log >&1)


                

##################################################################################################
# description:  apt debian install package non-interactive with defaults
# raw_url:      https://gist.githubusercontent.com/mrkafk/e8fda973e1c915814fca1be309a491f0/raw/1ecf9ff70014b7c4cd3fcb62628e0ee67be06b6d/gistfile1.txt
# filename:     gistfile1.txt


export DEBIAN_FRONTEND=noninteractive
apt-get -y -q install uswsusp


                

##################################################################################################
# description:  bash: virsh vm_wait_till_shut_down
# raw_url:      https://gist.githubusercontent.com/mrkafk/c9703a731d369bba9a15f2075ab58f45/raw/e13339a93b57e7955da886ef05d31851b689085d/snippets.sh
# filename:     snippets.sh


function vm_wait_till_shut_down () {
  for i in {1..600}; do
    STATE=$(virsh domstate "$1")
    if [ "$STATE" != "running" ]; then
      sleep 1
      return 0
    fi
    sleep 1
  done
  return 1
}


                

##################################################################################################
# description:  bash date_mdy date format
# raw_url:      https://gist.githubusercontent.com/mrkafk/d6f2e9e8e18ac8ee5a6e80f8a3edb5d4/raw/878172c086fa7a8492928035e9547dc1d446e6f2/snippets.sh
# filename:     snippets.sh


function date_mdy () {
  date +'%m_%d_%Y-%H_%M'
}


                

##################################################################################################
# description:  bash date_hm date format
# raw_url:      https://gist.githubusercontent.com/mrkafk/dd76aca6c5cabd7960d56c1a9439be09/raw/f0114327fb13d34ac1f75fe834c8079d0807db56/snippets.sh
# filename:     snippets.sh


function date_hm () {
  date +'%m_%d_%Y-%H_%M'
}


                

##################################################################################################
# description:  bash: pipemill while read x
# raw_url:      https://gist.githubusercontent.com/mrkafk/911eb6f7bf6993dd7b5c50887b7c9b27/raw/65aa7882e8bd281b28009adfc125f6ebbd61d6e0/copy_config.sh
# filename:     copy_config.sh


cat "$TMPF" | while read x; do
  
done


                

##################################################################################################
# description:  python uniq sort
# raw_url:      https://gist.githubusercontent.com/mrkafk/a936f8e02c5c701ede283b322e86b96a/raw/af555a5892f285e0ffb075b57d3c108fa579d3d1/find_dissimilar_packages.py
# filename:     find_dissimilar_packages.py


def uniq_sort(lst):
    lst = list(set(lst))
    lst.sort()
    return lst

                

##################################################################################################
# description:  python: nested iterable as csv
# raw_url:      https://gist.githubusercontent.com/mrkafk/80b7c6192028e4b9699edfc11a22cd20/raw/cb621871d38d34ae2fe033769522e00a20ff94ef/gistfile1.txt
# filename:     gistfile1.txt


def nested_iterable_as_csv_str(iterable, csv_delim=';'):
    '''Create .csv string out of two-level nested iterable.
    >>> nested_iterable_as_csv_str([('a', 'b'), (1, 2)])
    'a;b\\n1;2'
    '''
    return '\n'.join([csv_delim.join(map(str, x)) for x in iterable])

                

##################################################################################################
# description:  sed: select line number NUM in file
# raw_url:      https://gist.githubusercontent.com/mrkafk/fe6245e54392771ae45d173fe170d013/raw/25ea4e23cef38a44bae5e98625b652445a45e015/null
# filename:     null


sed "${NUM}q;d"


                

##################################################################################################
# description:  git: show top level repo dir
# raw_url:      https://gist.githubusercontent.com/mrkafk/ecd291b4f5a3d511bd36c6a5c0cea942/raw/3157af940802b2f3cf8425bbea16b9729ddc7bd4/null
# filename:     null


git rev-parse --show-toplevel


                

##################################################################################################
# description:  git show files modified between commits
# raw_url:      https://gist.githubusercontent.com/mrkafk/bd41c798a1c4b75d67dd84ccc1595fab/raw/8e6ca30adb17a27a83b05712144d165511abd7b0/null
# filename:     null


it diff HEAD a922b6bd1f11b5688e087081a1a225319c7c9c96 --name-only
.gitignore


                

##################################################################################################
# description:  python Find all virtualenvs in current dir, activate on selection with dialog
# raw_url:      https://gist.githubusercontent.com/mrkafk/8cda8924f2b44b35fa6c39d91f4ea82c/raw/94e4eb5073fb2b99029a0569561fa3bb1720c12e/null
# filename:     null


# Find all virtualenvs in current dir, activate on selection with dialog, use in .bash_profile
function va () {
	TMP1=/tmp/$$.1
	TMP2=/tmp/$$.2
	find . -name activate | grep -w 'bin/activate' | awk '{print NR " " $0 ;}' > "$TMP1"
	dialog --clear --menu "Select virtualenv:" 24 70 $(wc -l "$TMP1" | cut -d " " -f 1)  $(cat "$TMP1")  2>"$TMP2"
	NUM=$(cat $TMP2)
	VEPATH=$(sed "${NUM}q;d" "$TMP1" | awk '{print $2;}')
	source "$VEPATH"
	rm -f "$TMP1"
	rm -f "$TMP2"
}



                

##################################################################################################
# description:  linux bash tar certain file types in all subdirectories
# raw_url:      https://gist.githubusercontent.com/mrkafk/b577b04ab50d4a1cbc0f49780fb982a0/raw/0a2ed2d84e2d71bee76bf45c42dccbf90bec92db/find_tar.txt
# filename:     find_tar.txt


find ./someDir -name "*.php" -o -name "*.html" | tar -cf my_archive -T -


                

##################################################################################################
# description:  bash get file extension
# raw_url:      https://gist.githubusercontent.com/mrkafk/01747537cfacec2d0311495357d97a2a/raw/bada97b7e89b08785cc4f287f5dd22672bcc8ee6/null
# filename:     null


get file name without the path:

filename=$(basename -- "$fullfile")
extension="${filename##*.}"
filename="${filename%.*}"

Alternatively, you can focus on the last '/' of the path instead of the '.' which should work even if you have unpredictable file extensions:

filename="${fullfile##*/}"




                

##################################################################################################
# description:  sed: remove substring from found to the end of string
# raw_url:      https://gist.githubusercontent.com/mrkafk/555739f5d38896e5493bf929939275f3/raw/bf60dcc79704d7e822a734e3b762281537bc5874/null
# filename:     null


echo '/usr/local/cuda-9.2/lib64/stubs/libcuda.so' | sed -e 's/\(\/lib\).*$//g'



                

##################################################################################################
# description:  description
# raw_url:      https://gist.githubusercontent.com/mrkafk/abc6895c3ce81f7d08e83c9d16a73845/raw/8a4a014d3611a98eafde13122a403b86b7efe86c/pet-snippet.toml
# filename:     pet-snippet.toml


[[snippets]]
  description = "ipython: print complete history (not just current session)"
  command = "%hist -o -g -f ipython_history.md"
  output = ""


                

##################################################################################################
# description:  python  Delete files only from directory, one level
# raw_url:      https://gist.githubusercontent.com/mrkafk/f533e7c8a91d423e31dbcffff52fbeab/raw/0c3831c82ebaa6d279d9409342a4d977370bedf2/gistfile1.py
# filename:     gistfile1.py


import os
import shutil

def purge_files_in_folder(folder):
    for the_file in os.listdir(folder):
        file_path = os.path.join(folder, the_file)
        try:
            if os.path.isfile(file_path):
                os.unlink(file_path)
        except Exception as e:
            print(e)

                

##################################################################################################
# description:  python sane filename
# raw_url:      https://gist.githubusercontent.com/mrkafk/18e8edf66578aee8e659c6c18511d3f5/raw/d543b6a3e17620198a2b2fa0d197a89aaf699b9e/gistfile1.py
# filename:     gistfile1.py


filename_chars = string.ascii_letters + string.digits + '_.'

def sane_filename(fname):
    return ''.join([c if c in filename_chars else '_' for c in fname])


                

##################################################################################################
# description:  python app top dir
# raw_url:      https://gist.githubusercontent.com/mrkafk/603abd9978945806215711f08cd66699/raw/1a682a14b08df0aafdc5151f2f167aabb7c8271a/app_top_dir.py
# filename:     app_top_dir.py


import os
pyfile_top_dir = os.path.dirname(os.path.abspath(__file__))


                

##################################################################################################
# description:  exim  debug foreground
# raw_url:      https://gist.githubusercontent.com/mrkafk/37aee6647566a9c3bacc6f16f51f64be/raw/59847244c1f133e57f3d2992532bfe280de43c64/gistfile1.txt
# filename:     gistfile1.txt


exim -bd -d

                

##################################################################################################
# description:  swaks send email with auth
# raw_url:      https://gist.githubusercontent.com/mrkafk/ad40b5db844b954afc1ef990597d6c45/raw/d54449469cc6ca461ef27567ee036571e4d151d9/gistfile1.txt
# filename:     gistfile1.txt


swaks -f sender -t recipient --header "Subject: problem on `hostname`" --body "$TMP" -s mailserver -a PLAIN -au username -ap password

                

##################################################################################################
# description:  python mkdirp
# raw_url:      https://gist.githubusercontent.com/mrkafk/d5b7dae00314cb41d25f97f771efb0dc/raw/a124f7d1d0f7395f7e9426a8bef28b9247f7fd60/gistfile1.txt
# filename:     gistfile1.txt


def mkdirp(dirname):
    ''' Equivalent of "mkdir -p" in Unix/Linux'''
    dirname = os.path.abspath(dirname)
    if os.path.isfile(dirname):
        dirname = os.path.dirname(dirname)
    try:
        os.makedirs(dirname)
    except OSError as exc:
        if exc.errno == errno.EEXIST:
            pass
        else:
            raise


                

##################################################################################################
# description:  python Set up logging
# raw_url:      https://gist.githubusercontent.com/mrkafk/44b22ea8dc573ac28270b56aabc69172/raw/8cba7e0a63f514421bccf2021c8874a235cb3e45/gistfile1.txt
# filename:     gistfile1.txt


LEVEL = logging.getLevelName(os.getenv('LOG_LEVEL', 'INFO').upper())
LOG = logging.getLogger(__name__)
LOG.setLevel(LEVEL)

HANDLER = logging.StreamHandler()
HANDLER.setLevel(LEVEL)
HANDLER.setFormatter(logging.Formatter(
    '%(asctime)s %(name)s:%(lineno)d %(funcName)s %(levelname)s | %(message)s'
))

LOG.addHandler(HANDLER)

                

##################################################################################################
# description:  python strip versions from requirements.txt
# raw_url:      https://gist.githubusercontent.com/mrkafk/d4530a5dcd957a24a0a0/raw/e5a9f0165298688b0cb0713bd22e06c12fef1b95/strip_requirements_vers.py
# filename:     strip_requirements_vers.py


#!/usr/bin/env python

import sys

def find_requirements_file():
    try:
        fo = open('requirements.txt', 'rb')
    except OSError:
        print >>sys.stderr, 'File requirements.txt not found'
        sys.exit(1)
    return fo

def strip_vers(fo):
    lines = [line.split('=') for line in fo]
    return filter(None, [line[0] for line in lines])

def write_reqs_nover():
    fo = find_requirements_file()
    vers = strip_vers(fo)
    outfname = 'requirements_nover.txt'
    with open(outfname, 'wb') as fo:
        fo.write('\n'.join(vers))
    print >>sys.stderr, 'Wrote output to', outfname

if __name__ == '__main__':
    write_reqs_nover()


                

##################################################################################################
# description:  python flatten list
# raw_url:      https://gist.githubusercontent.com/mrkafk/18cb03061a6d524521ab/raw/e8691190d5ca1c5f5cd0c2ddf1a86dc12d07aeae/gistfile1.txt
# filename:     gistfile1.txt


def flatten(lst):
    flat = []
    for x in lst:
        if hasattr(x, '__iter__') and not isinstance(x, basestring):
            flat.extend(flatten(x))
        else:
            flat.append(x)
    return flat

                

##################################################################################################
# description:  bash: current dir advanced
# raw_url:      https://gist.githubusercontent.com/mrkafk/aa07a5fd683dea6b661f/raw/44edd370bc0f6501ce848f7fa76a3128a65e1d8c/curdir.sh
# filename:     curdir.sh


#!/bin/bash

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPTDIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"


                

##################################################################################################
# description:  python: fast gzip gunzip mkfifo
# raw_url:      https://gist.githubusercontent.com/mrkafk/3c6eab5ca112e45d0781/raw/19079da75b8a50bc60225db2b2ab656c443c10db/gistfile1.py
# filename:     gistfile1.py



#http://www.code-corner.de/?p=153

    import os
    import subprocess

    tmp_fifo = "tmp_fifo"

    os.mkfifo(tmp_fifo)

    p = subprocess.Popen("gzip --stdout -d traj.pdb.gz > %s" % tmp_fifo, shell=True)
    f = io.open(tmp_fifo, "r")

    while True:
        line = f.readline()
        if not line: break

    f.close()
    p.wait()

    os.remove(tmp_fifo)

                

##################################################################################################
# description:  shell, bash: dir of executing script
# raw_url:      https://gist.githubusercontent.com/mrkafk/86f17dbdba71966637b7/raw/27226e36d1be8a2768b5d1d57102a47e7b499fc1/gistfile1.sh
# filename:     gistfile1.sh


CURD="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$CURD"


                

##################################################################################################
# description:  shell, bash: loop
# raw_url:      https://gist.githubusercontent.com/mrkafk/a8c1a0cf4c5fad3813c1/raw/e45cc463ca973a32f1c590da5e64a82c5b639c5a/gistfile1.sh
# filename:     gistfile1.sh


for i in {1..100}; do echo ${i}; done

                

##################################################################################################
# description:  shell: scp upload in parallel batches
# raw_url:      https://gist.githubusercontent.com/mrkafk/3389ef792d855ee38ea9/raw/4703c6b9968530145533ab5dc40e2c26d8e51b34/gistfile1.sh
# filename:     gistfile1.sh


FLIST=file_paths_list.txt

COUNTER=0
PIDS=()

cat ${FLIST} | while read F; do
                COUNTER=$((COUNTER + 1))
                echo COUNTER $COUNTER
                sleep 1
                scp ${F} root@host:/data/tmp &
                PID=$!
                echo Adding PID $PID
                PIDS+=($PID)
                if [ $COUNTER -lt 20 ]; then
                        continue
                fi
                # wait for uploads batch to complete
                for PID in ${PIDS[@]}; do
                        echo waiting for PID $PID
                        wait $PID
                done
                # reset PIDS array
                PIDS=()
                COUNTER=0
done


                